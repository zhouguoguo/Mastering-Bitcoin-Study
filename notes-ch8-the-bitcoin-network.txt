1.Peer-to-Peer Network Architecture
网络节点在网状网络中互连，具有“平面”拓扑。
除了比特币的P2P协议之外，还有其他的协议像用来挖矿和lightweight或者移动钱包的Stratum.
这些协议由网关路由服务器提供，网关路由服务器使用比特币P2P协议访问比特币网络，然后将网络扩展到运行其他协议的节点。
Stratum服务器将Stratum挖矿节点通过Stratum协议连接至比特币P2P网络:
P2P network --- Stratum Server --- Stratum mining node

2.Node Types and Roles
一个比特币的节点是一些功能的集合:路由，完整区块链数据库，挖矿，钱包服务。
所有的节点都基本具备路由的功能，以参与到网络中。所有的节点参与验证和传播交易与区块，发现与维护与peer的连接。
Full node具备完整的区块链数据，全节点可以自主验证任何交易，不用引用外部的任何内容。
SPV节点或者lightweight节点，只维护一部分的区块内容，验证交易用SPV方法。也就是说SPV节点不具备四个功能之中的完整区块链数据库的功能。
挖矿节点可以是全节点，也可以是轻量级节点。轻量级挖矿节点参与pool mining，并且依赖pool server来维持全节点。
用户钱包可能是全节点的一部分，一般是个桌面比特币客户端。很多用户钱包跑在资源有限的设备上，比如智能手机上，这些是SPV节点。
除了上述在比特币P2P协议中的功能，还有一些服务器和节点运行着其他的协议，比如特殊的矿池协议和轻量级的客户端访问协议。

3.The Extended Bitcoin Network扩展比特币网络(P2P+...)
运行比特币P2P协议的比特币主网，包含大约5000至8000个运行不同比特币客户端版本(bitcoin core)的监听节点还有几百个运行着比特币p2p协议的其他实现版本的节点(比如Bitcoin Classic, Bitcoin Unlimited, BitcoinJ, Libbitcoin, btcd, and bcoin)。
P2P网络中很小一部分的节点是挖矿节点。很多大公司通过运行bitcoin core全节点客户端来与比特币网络交互，它具有区块链数据和网络节点的完整副本，但没有挖矿和钱包功能。这些节点网络边缘路由器，允许很多其他的服务，比如exchanges(交易所), wallets, block explorers, merchant payment processing运行于它之上。
与主要的比特币P2P网络相连的是许多池服务器和协议网关，它们连接运行其他协议的节点。这些其他协议的节点主要是pool mining节点和轻量级钱包节点，他们不具备完整的区块数据。

4.Bitcoin Relay Networks
比特币替代网络，不能替换P2P

5.Network Discovery
当新节点初始化时，通过TCP 8333端口与某已存在节点进行通信获取数据。在建立连接时，该节点要通过传输一些识别信息来进行握手：
nVersion客户端P2P网络版本号
nLocalServices节点支持的本地服务列表，目前只有NODE_NETWORK
nTime当前时间
addrYou从该节点看的对端节点IP地址
addrMe本地节点的IP地址
subver节点上运行的软件类型
bestHeight节点的区块链的区块高度

一个新节点如何找到peer?通过DNS seeds.bitcoin core客户端包含了五个不同的DNS种子的名字。
可以使用-connect=<IPAddress>选项来制定连接的ip，如果指定IP那么不会采取自动发现节点的机制。
如果一条连接上没有流量，节点会周期性发送消息来维持连接。如果一个节点超过90分钟没有在连接里通信，它会被认为已经断开连接。

6.Full Nodes
全节点是指维持包含全部交易信息的完整区块链的节点。如果你需要很大的硬盘空间和两三天的时间来与网络同步，那说明你运行的是全节点，这是去中心化的代价。全节点验证交易不需要引用外部的任何内容。
大约75%的节点运行的是reference client Bitcoin Core，也叫Satoshi client. 也就是上述握手过程中的版本消息中的subver里的"Satoshi"

7.Exchanging "Inventory"交换目录清单
一个全新的节点的同步过程从version message开始，通过version message可以知道一个节点当前的区块高度和软件版本。
更新区块时，对端节点通过Inv message来传输更新区块的哈希值。
配对节点之前可以交换getblocks消息来通知对方本地的最高区块的哈希值。这样当前节点可以通过判断收到的区块哈希不是最新区块的哈希而是之前的老区块的哈希值，来推断自己的区块高度大于对端节点。
本地区块高度大于对端的节点，具有更多的区块数据，可以识别出对端阶段缺少哪些区块信息。它们会通过inv message，来传输所缺少区块的哈希值。然后缺少这些区块信息的节点，可以通过一些列的getdata消息来请求完整的区块信息，然后使用inv里的区块哈希来识别这些区块数据。

8.Simplified Payment Verification (SPV) Nodes
不包含完整的区块信息
随着比特币的普及，SPV节点正成为比特币节点最常见的形式，尤其是比特币钱包。
SPV节点只存储区块头信息，而区块中的交易信息是不下载的。如此这样存下来的信息，较完整的区块信息，小了1000倍.SPV节点没有完整的UTXO的信息，所以SPV验证交易的方法有一些不同，依赖于对端节点提供需要的部分区块信息。
SPV通过引用它在区块链中的深度而非高度，来验证交易。一个SPV节点只验证区块组成的链而不验证所有的交易，并且将区块链连接到感兴趣的交易。
打个比方，当检查第300000区块中的某交易的时候，一个全节点连接所有的300000个区块一直到创世区块，并且建立一个UTXO的完整数据库，通过确认UTXO未被花费，来确定交易的有效性。
而一个SPV节点无法验证UTXO是否被花费，因为SPV节点没有交易信息，因此取而代之，SPV节点会在交易和包含该交易的区块之间建立一条merkle路径。然后SPV节点等到#300001区块到#300006区块链接在区块#300000之上了，再在300001到300006之下建立它的深度来验证交易。六个区块可以保证该交易已经不存在double spend的情况。
如果一个交易事实上不存在于一个区块中，那么一个SPV节点不会认为这个交易存在。一个SPV节点通过验证区块的工作量证明，和交易的merkle路径，来验证交易在区块中是否存在。
当然，一个SPV节点可以验证交易是否存在于区块中，但是不能验证该交易，比如是否存在double spent的情况。该漏洞可以用在拒绝服务攻击(DOS attack)和针对SPV节点的双花攻击中。为防止这种情况发生，SPV节点需要随机地连接到几个节点，以增加它接触诚实节点的可能性。


9.Bloom Filters
10.How SPV Nodes Use Bloom Filters
11.SPV Nodes and Privacy
12.Encrypted and Authenticated Connections
13.Transaction Pools